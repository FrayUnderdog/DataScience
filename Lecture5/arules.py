import pandas as pd
import matplotlib.pyplot as plt
from mlxtend.frequent_patterns import fpgrowth, association_rules
from itertools import product

# Step 1: Load Dataset
df = pd.read_csv("amr_horse_ds.csv")

# Step 2: Binning for Age
df['Age'] = pd.cut(df['Age'], bins=3, labels=['Young', 'Middle-aged', 'Old'])

# Step 3: One-Hot Encoding
df = pd.get_dummies(df)

# Step 4: Define hyper-parameter grids
min_sup_list = [0.05, 0.1, 0.4]
min_conf_list = [0.70, 0.85, 0.95]
min_lift_list = [1.1, 1.5, 4]

# Step 5: Try all combinations
results = []
rules_to_save = None
chosen_params = None

for min_sup, min_conf, min_lift in product(min_sup_list, min_conf_list, min_lift_list):
    frequent_patterns = fpgrowth(df, min_support=min_sup, use_colnames=True)
    rules = association_rules(frequent_patterns, metric='confidence', min_threshold=min_conf)
    rules = rules[rules['lift'] > min_lift]

    n_rules = len(rules)
    results.append((min_sup, min_conf, min_lift, n_rules))

    # Select the first parameter set that gives between 20–50 rules
    if 20 <= n_rules <= 50 and rules_to_save is None:
        rules_to_save = rules
        chosen_params = (min_sup, min_conf, min_lift)

# Step 6: Print summary of all runs
print("Summary of generated rules:")
print("min_sup | min_conf | min_lift | num_rules")
for r in results:
    print(f"{r[0]:.2f} | {r[1]:.2f} | {r[2]:.2f} | {r[3]}")

# Step 7: Save the chosen rules
if rules_to_save is not None:
    rules_to_save.to_csv("selected_rules.csv", index=False)
    print("\nSaved rules generated by:")
    print(f"min_sup={chosen_params[0]}, min_conf={chosen_params[1]}, min_lift={chosen_params[2]}")
else:
    print("\nNo parameter combination produced 20–50 rules.")

# Step 8: Visualize the selected rules
if rules_to_save is not None:
    fig = plt.figure()
    ax = fig.add_subplot(projection='3d')
    ax.scatter(rules_to_save['support'], rules_to_save['confidence'], rules_to_save['lift'], marker="*")
    ax.set_xlabel('Support')
    ax.set_ylabel('Confidence')
    ax.set_zlabel('Lift')
    plt.title('Association Rules Visualization')
    plt.show()
